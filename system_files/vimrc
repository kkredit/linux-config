" Plugins

call plug#begin('~/.vim/plugged')

" Formatting and colorschemes
Plug 'tomasiser/vim-code-dark'
"Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'blueyed/vim-diminactive'

" Functionality
Plug 'machakann/vim-highlightedyank'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'mattn/vim-goimports'

" Neovim only
if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'branch': '0.5-compat', 'do': ':TSUpdate'}
  Plug 'rmagatti/auto-session'
  Plug 'Th3Whit3Wolf/one-nvim'
  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/nvim-compe'
  Plug 'kabouzeid/nvim-lspinstall'
  Plug 'f-person/git-blame.nvim'
endif

call plug#end()

" Plugin configuration
let g:highlightedyank_highlight_duration = 150
let g:fzf_layout = { 'down': '30%' }
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_statusline_ontop = 1
let g:airline_detect_spell = 0
let g:gitblame_enabled = 0
let g:auto_session_pre_save_cmds = ["tabdo NERDTreeClose"]
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" Fzf -- Rg command with preview window
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)
" Completion (nvim-compe)
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.treesitter = v:true


" Keymappings
let mapleader = " "
nnoremap <leader>w :w<CR>
nnoremap <leader>W :wq<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>1 :source $MYVIMRC<CR>
nnoremap <C-p> :<C-u>FZF<CR>
nnoremap <leader>; :History:<CR>
inoremap jk <esc>
nnoremap <leader>l :NERDTreeFind<CR>
nnoremap <leader>, :noh<CR>
nnoremap <leader>z za<CR>
nnoremap <leader>/ :NERDTreeToggle<CR>
nnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>i i_<Esc>r
nnoremap <leader>. :let @+=expand('%')<CR>
nnoremap <leader>> :let @+=expand('%:p')<CR>
nnoremap <silent> <leader>b :GitBlameToggle<CR>
nnoremap <leader>r :Rg<CR>

" Colors
syntax on
set t_Co=256
set t_ut=
"let g:airline_theme = 'codedark'
"let g:airline_theme = 'onehalfdark'
let g:airline_theme = 'jellybeans'
"colorscheme codedark
if has('nvim')
  "colorscheme one-nvim
  "^^ broken? ...
  colorscheme codedark
else
  colorscheme codedark
endif
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Indentation & tabs
set backspace=indent,eol,start
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
autocmd FileType make setlocal noexpandtab
autocmd FileType go setlocal noexpandtab
set foldlevel=999

" Display & format
set cursorline
set number
set relativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber
"nnoremap <leader>p :set number!<CR>:set relativenumber!<CR>:set paste!<CR>
"set textwidth=100
set wrapmargin=2
set showmatch
if exists('+colorcolumn')
  set colorcolumn=101
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
endif

" Splits and windows
set splitbelow
set splitright
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>
nnoremap J :5winc +<CR>
nnoremap K :5winc -<CR>
nnoremap L :5winc ><CR>
nnoremap H :5winc <<CR>

" Golang settings
autocmd Filetype go call SetGolangOptions()
function SetGolangOptions()
  :nnoremap <leader>t :w<CR>:!go fmt %<CR><CR>
endfunction

" Git commit settings
autocmd Filetype gitcommit call SetGitcommitOptions()
function SetGitcommitOptions()
  set textwidth=72
  set colorcolumn=73
  set colorcolumn+=51
  $
  read !echo '\# Recent commits:'; git log --oneline --no-decorate -8 | sed -e 's/^/\# /g'
  1
  startinsert
endfunction

" Git rebase settings
autocmd Filetype gitrebase call SetGitrebaseOptions()
function SetGitrebaseOptions()
  call setreg('p', "0dt ipick\<esc>j0")
  call setreg('r', "0dt ireword\<esc>j0")
  call setreg('e', "0dt iedit\<esc>j0")
  call setreg('s', "0dt isquash\<esc>j0")
  call setreg('f', "0dt ifixup\<esc>j0")
endfunction

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Browse and scroll
set scrolloff=5
set laststatus=2
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Open at same line as was last opened
autocmd BufReadPost * if &filetype !~ 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

"" Spell
"set spell spelllang=en_us
"hi clear SpellBad
"hi SpellBad cterm=underline
"hi clear SpellCap
"hi clear SpellLocal
"hi clear SpellRare

" Highlight whitespace at ends of lines
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Miscellaneous
set undofile
set autoread

