" Plugins

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Formatting and colorschemes
Plug 'tomasiser/vim-code-dark'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'blueyed/vim-diminactive'

" Functionality
Plug 'machakann/vim-highlightedyank'
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'jiangmiao/auto-pairs'
Plug 'dkarter/bullets.vim'
Plug 'psliwka/vim-smoothie'
Plug 'bkad/CamelCaseMotion'

" Neovim only
if has('nvim')
  " General setup
  set runtimepath^=~/.vim runtimepath+=~/.vim/after
  let &packpath=&runtimepath
  set completeopt=menu,menuone,noselect

  " Plugins
  " LSP and language tools
  Plug 'williamboman/mason.nvim'
  Plug 'williamboman/mason-lspconfig.nvim'
  Plug 'neovim/nvim-lspconfig'
  Plug 'WhoIsSethDaniel/mason-tool-installer.nvim', {'do': ':MasonToolsInstall'}
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'nvimtools/none-ls.nvim'
  Plug 'nvimtools/none-ls-extras.nvim'
  Plug 'Zeioth/none-ls-external-sources'
  " Plug 'jose-elias-alvarez/typescript.nvim' -- replacing with pmizio/typescript-tools.nvim
  Plug 'pmizio/typescript-tools.nvim'
  Plug 'mracos/mermaid.vim'
  Plug 'imsnif/kdl.vim'
  Plug 'ellisonleao/glow.nvim'
  Plug 'ThePrimeagen/refactoring.nvim'

  " Completion
  Plug 'hrsh7th/nvim-cmp'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/cmp-vsnip'
  Plug 'hrsh7th/vim-vsnip'
  Plug 'hrsh7th/vim-vsnip-integ'
  " Plug 'rafamadriz/friendly-snippets'

  " Copilot
  Plug 'github/copilot.vim'
  Plug 'CopilotC-Nvim/CopilotChat.nvim'

  " Themes
  Plug 'Shatur/neovim-ayu'
  Plug 'kkredit/oak'
  Plug 'olimorris/onedarkpro.nvim'
  Plug 'norcalli/nvim-colorizer.lua'
  Plug 'doki-theme/doki-theme-vim'

  " Other
  Plug 'akinsho/bufferline.nvim'
  Plug 'RRethy/vim-illuminate'
  Plug 'ggandor/leap.nvim'
  Plug 'folke/which-key.nvim'
  Plug 'folke/trouble.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
  Plug 'Pocco81/true-zen.nvim'
endif

call plug#end()

" Plugin configuration
let g:copilot_node_command='~/.nvm/versions/node/v20.19.0/bin/node'
let g:smoothie_speed_linear_factor=80
let g:smoothie_speed_exponentiation_factor=0.6
let g:NERDTreeGitStatusConcealBrackets = 1
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'',
                \ 'Staged'    :'',
                \ 'Untracked' :'',
                \ 'Renamed'   :'',
                \ 'Unmerged'  :'',
                \ 'Deleted'   :'﫧',
                \ 'Dirty'     :'',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
let g:highlightedyank_highlight_duration = 150
let g:airline_powerline_fonts = 1
let g:airline_detect_spell = 0
let g:gitblame_enabled = 0
let g:auto_session_pre_save_cmds = ["tabdo NERDTreeClose"]
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
" Bullets.vim
let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \ 'scratch'
    \]
" CamelCaseMotion
" to trigger functionality with leader key:
" let g:camelcasemotion_key = '<leader>'
" to replace default functionality:
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" Keymappings
let mapleader = " "
let timeoutlen = 500

" gi: go to last insertion and enter insert mode
" so gl: go to last insertion and start in normal mode
nnoremap gl `.

nnoremap <silent> <leader>w :w<CR>
nnoremap <leader>W :wq<CR>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>1 :source $MYVIMRC<CR>
inoremap jk <esc>
inoremap kj <esc>
nnoremap <silent> <leader>d :NERDTreeFind<CR>
nnoremap <silent> <leader>/ :NERDTreeToggle<CR>
nnoremap <silent> <leader>, :noh<CR>:cclose<CR>:lclose<CR>:Trouble close<CR>:NERDTreeClose<CR><C-l>
nnoremap <leader>z za<CR>
nnoremap <leader>y "+y
vnoremap <leader>y "+y
"nnoremap <leader>p "+p
nnoremap <leader>ii i_<Esc>r
" TODO: setup vsnip for this kind of thing
nnoremap <leader>ib i<br/><Esc>l
nnoremap <leader>rw ciw<C-R>0<ESC>
vnoremap <leader>a :CocAction<CR>
nnoremap <leader>a :CocAction<CR>
nnoremap <leader>fr :let @+=expand('%')<CR>
nnoremap <leader>ff :let @+=expand('%:p')<CR>
nnoremap <leader>fn :let @+=join([expand('%'),line(".")], ':')<CR>
nnoremap <leader>U :PlugUpdate<CR>:MasonToolsUpdate<CR>:TSUpdate all<CR>

let g:AutoPairsShortcutFastWrap = '<C-e>'
let g:AutoPairsShortcutJump = '<C-n>'

nnoremap <leader>gd :Gdiffsplit<CR>
nnoremap <leader>gD :G diff %<CR>
nnoremap <leader>gm :G mergetool<CR>
nnoremap <leader>gb :G blame -w -C<CR>
nnoremap <leader>gl :GBrowse<CR>
vnoremap <leader>gl :GBrowse<CR>

nnoremap <C-p> :<cmd>Telescope find_files<cr>
nnoremap <leader>; <cmd>Telescope command_history<cr>
nnoremap <leader>s <cmd>Telescope live_grep<cr>
nnoremap <leader>S <cmd>Telescope grep_string<cr>
vnoremap <leader>s "zy<cmd>exec 'Telescope grep_string search=' . escape(@z, ' ')<cr>
nnoremap <leader>kf <cmd>Trouble diagnostics<cr>
nnoremap <leader>kq <cmd>Trouble quickfix<cr>
nnoremap <leader>kl <cmd>Trouble loclist<cr>
nnoremap <leader>kd <cmd>Trouble lsp_definitions<cr>
nnoremap <leader>kD <cmd>Trouble lsp_type_definitions<cr>
nnoremap gr <cmd>Trouble lsp_references<cr>
nnoremap <leader>kr <cmd>Telescope lsp_references<cr>
nnoremap <leader>kgs <cmd>Telescope git_status<cr>
nnoremap <leader>kgc <cmd>Telescope git_commits<cr>
nnoremap <leader>kgb <cmd>Telescope git_branches<cr>
nnoremap <leader>kt <cmd>Telescope treesitter<cr>
nnoremap <leader>kk <cmd>Telescope builtin<cr>
nnoremap <leader>kc <cmd>Copilot panel<cr>

" CopilotChat and Commentary mappings (note, both start with <leader>c)
"" Commentary
nnoremap <leader>c<space> :Commentary<CR>
vnoremap <leader>c<space> :Commentary<CR>
"" CopilotChat
nnoremap <leader>cc :CopilotChat<CR>
vnoremap <leader>cc :CopilotChat<CR>
vnoremap <leader>ce :CopilotChatExplain<CR>
vnoremap <leader>co :CopilotChatOptimize<CR>
vnoremap <leader>cf :CopilotChatFix<CR>
vnoremap <leader>ct :CopilotChatTests<CR>
nnoremap <leader>cr :CopilotChatReview<CR>
vnoremap <leader>cr :CopilotChatReview<CR>

" Colors
syntax on
set t_Co=256
set t_ut=
if has('nvim')
  " if in December, Christmas theme!
  if strftime("%m") == "12"
    " let g:airline_theme = 'laederon'
    let g:airline_theme = 'serene'
    colorscheme christmas_chocola
    hi MatchParen ctermbg=Brown guibg=Brown
    hi SignColumn guibg=Black
  else
    let g:airline_theme = 'tomorrow'
    colorscheme oak
    call oak#hi('String', g:oak#palette.sky1, '', 'italic')
    call oak#hi('Identifier', g:oak#palette.leaf2)
    call oak#hi('Comment', g:oak#palette.fur2)
    hi MatchParen guibg=#aa4d4d
  endif
else
  let g:airline_theme = 'jellybeans'
  colorscheme codedark
  hi ColorColumn ctermbg=0 guibg=#333333
endif
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

nnoremap <leader>v1 :set background=dark<CR>:let g:airline_theme = 'tomorrow'<CR>:colorscheme oak<CR><C-l>
nnoremap <leader>v2 :set background=dark<CR>:let g:airline_theme = 'jellybeans'<CR>:colorscheme ayu<CR><C-l>
nnoremap <leader>v3 :set background=dark<CR>:let g:airline_theme = 'jellybeans'<CR>:colorscheme onedark_dark<CR><C-l>
nnoremap <leader>v6 :set background=light<CR>:let g:airline_theme = 'papercolor'<CR>:colorscheme ayu-light<CR><C-l>

" Indentation & tabs
set backspace=indent,eol,start
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
autocmd FileType make setlocal noexpandtab
autocmd FileType go setlocal noexpandtab
set foldlevel=999

" Display & format
set cursorline
set number
"set relativenumber
"autocmd InsertEnter * :set norelativenumber
"autocmd InsertLeave * :set relativenumber
"nnoremap <leader>vl :setl relativenumber!<CR>
"set textwidth=100
set formatoptions-=tc
set wrapmargin=2
set showmatch
set encoding=utf-8
scriptencoding utf-8
set listchars=tab:»\ ,space:·,trail:-
"set list

" Splits and windows
set splitbelow
set splitright
nnoremap J :5winc +<CR>
nnoremap K :5winc -<CR>
nnoremap L :5winc ><CR>
nnoremap H :5winc <<CR>
" jump to previous window
nnoremap <silent> <leader><BS> <C-W>p
" close vim if a QFL is the only remaining window
" see https://stackoverflow.com/a/7477056
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && &buftype == "quickfix"|q|endif
aug END
nnoremap <leader>bo :%bd \| e# \| bd# <CR> \|`"
nnoremap <leader>b<BS> <C-^>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bN :bN<CR>
nnoremap <leader>bd :bd<CR>
nnoremap <leader>bp :BufferLineTogglePin<CR>

" Markdown settings
autocmd Filetype markdown call SetMarkdownOptions()
function SetMarkdownOptions()
  set textwidth=100
  set colorcolumn=101
  set formatoptions+=tc
  " rewrap current paragraph: vip | gq
endfunction

" Git commit settings
autocmd Filetype gitcommit call SetGitcommitOptions()
function SetGitcommitOptions()
  set textwidth=72
  set colorcolumn=73
  set colorcolumn+=51
  $
  read !echo '\# Recent commits:'; git log --oneline --no-decorate -8 | sed -e 's/^/\# /g'
  1
  "startinsert
endfunction

" Git rebase settings
autocmd Filetype gitrebase call SetGitrebaseOptions()
function SetGitrebaseOptions()
  call setreg('p', "0dt ipick\<esc>j0")
  call setreg('r', "0dt ireword\<esc>j0")
  call setreg('e', "0dt iedit\<esc>j0")
  call setreg('s', "0dt isquash\<esc>j0")
  call setreg('f', "0dt ifixup\<esc>j0")
endfunction

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Browse and scroll
set scrolloff=5
set laststatus=2
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Open at same line as was last opened
autocmd BufReadPost * if &filetype !~ 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

"" Highlight whitespace at ends of lines
"highlight ExtraWhitespace ctermbg=red guibg=red
"match ExtraWhitespace /\s\+$/
"autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
"autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
"autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"autocmd BufWinLeave * call clearmatches()
"" Remove trailing whitespace except in markdown files
let exceptlist = ['markdown', 'rst']
autocmd BufWritePre * if index(exceptlist, &ft) < 0 | :%s/\s\+$//e

" Highlight all TODOs
augroup HiglightTODO
    autocmd!
    autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO\|FIXME', -1)
augroup END

" Miscellaneous
set undofile
set autoread
