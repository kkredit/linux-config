" Plugins

call plug#begin('~/.vim/plugged')

" Formatting and colorschemes
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Functionality
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'

" Languages
if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'branch': '0.5-compat', 'do': ':TSUpdate'}
  " Not working
endif
Plug 'fatih/vim-go'

call plug#end()

" Plugin configuration
let g:fzf_layout = { 'down': '30%' }
let g:airline_powerline_fonts = 1
let g:airline_theme='onehalfdark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_statusline_ontop = 1
let g:airline_detect_spell = 0
" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif


" Keymappings
let mapleader = " "
nnoremap <leader>w :w<CR>
nnoremap <leader>W :wq<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>r :source ~/.vimrc<CR>
nnoremap <C-p> :<C-u>FZF<CR>
nnoremap <leader>; :History:<CR>
inoremap jk <esc>
nnoremap <leader>l :NERDTreeFind<CR>

" Colors
syntax on
set t_Co=256
colorscheme onehalfdark
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Indentation & tabs
set backspace=indent,eol,start
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
autocmd FileType make setlocal noexpandtab

" Display & format
set cursorline
set number
set relativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber
nnoremap <leader>c :set number!<CR>:set relativenumber!<CR>:set paste!<CR>
set textwidth=100
set wrapmargin=2
set showmatch
if exists('+colorcolumn')
  set colorcolumn=101
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
endif

" Golang settings
autocmd Filetype go call SetGolangOptions()
function SetGolangOptions()
  :nnoremap <leader>t :GoFmt<CR>
  :nnoremap <leader>g :GoCallers<CR>
endfunction

" Git commit settings
autocmd Filetype gitcommit call SetGitcommitOptions()
function SetGitcommitOptions()
  set textwidth=72
  set colorcolumn=73
  set colorcolumn+=51
  $
  read !echo '\# Recent commits:'; git log --oneline --no-decorate -8 | sed -e 's/^/\# /g'
  1
  startinsert
endfunction

" Git rebase settings
autocmd Filetype gitrebase call SetGitrebaseOptions()
function SetGitrebaseOptions()
  call setreg('p', "0dt ipick\<esc>j0")
  call setreg('r', "0dt ireword\<esc>j0")
  call setreg('e', "0dt iedit\<esc>j0")
  call setreg('s', "0dt isquash\<esc>j0")
  call setreg('f', "0dt ifixup\<esc>j0")
endfunction

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Browse and scroll
set scrolloff=5
set laststatus=2
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Open at same line as was last opened
autocmd BufReadPost * if &filetype !~ 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

" Spell
set spell spelllang=en_us
hi clear SpellBad
hi SpellBad cterm=underline
hi clear SpellCap
hi clear SpellLocal
hi clear SpellRare
:nmap <C-l> :w!<CR>:!aspell check %<CR>:e! %<CR>

" Highlight whitespace at ends of lines
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Miscellaneous
set undofile

